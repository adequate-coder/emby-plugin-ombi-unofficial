<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Controller</name>
    </assembly>
    <members>
        <member name="T:MediaBrowser.Controller.Api.BaseApiService">
            <summary>
            Class BaseApiService
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseApiService.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseApiService.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseApiService.ResultFactory">
            <summary>
            Gets or sets the HTTP result factory.
            </summary>
            <value>The HTTP result factory.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseApiService.Request">
            <summary>
            Gets or sets the request context.
            </summary>
            <value>The request context.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseApiService.ToOptimizedResult``1(``0)">
            <summary>
            To the optimized result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseApiService.GetSession(MediaBrowser.Controller.Net.ISessionContext)">
            <summary>
            Gets the session.
            </summary>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseApiService.GetItemByName(System.String,System.String,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Gets the name of the item by.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.MaxOfficialRating">
            <summary>
            Gets or sets the max offical rating.
            </summary>
            <value>The max offical rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.StartIndex">
            <summary>
            Skips over a given number of items within the results. Use for paging.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Limit">
            <summary>
            The maximum number of items to return
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Recursive">
            <summary>
            Whether or not to perform the query recursively
            </summary>
            <value><c>true</c> if recursive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.ParentId">
            <summary>
            Specify this to localize the search to a specific item or folder. Omit to use the root.
            </summary>
            <value>The parent id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Fields">
            <summary>
            Fields to return within the items, in addition to basic information
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.ExcludeItemTypes">
            <summary>
            Gets or sets the exclude item types.
            </summary>
            <value>The exclude item types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.IncludeItemTypes">
            <summary>
            Gets or sets the include item types.
            </summary>
            <value>The include item types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.AnyProviderIdEquals">
            <summary>
            Provider IDs to match at least one of.
            </summary>
            <value>The any provider id equals filter.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Filters">
            <summary>
            Filters to apply to the results
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.IsFavorite">
            <summary>
            Gets or sets the Isfavorite option
            </summary>
            <value>IsFavorite</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.MediaTypes">
            <summary>
            Gets or sets the media types.
            </summary>
            <value>The media types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.ImageTypes">
            <summary>
            Gets or sets the image types.
            </summary>
            <value>The image types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.SortBy">
            <summary>
            What to sort the results by
            </summary>
            <value>The sort by.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Genres">
            <summary>
            Limit results to items containing specific genres
            </summary>
            <value>The genres.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Years">
            <summary>
            Limit results to items containing specific years
            </summary>
            <value>The years.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Person">
            <summary>
            Limit results to items containing a specific person
            </summary>
            <value>The person.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.PersonTypes">
            <summary>
            If the Person filter is used, this can also be used to restrict to a specific person type
            </summary>
            <value>The type of the person.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Studios">
            <summary>
            Limit results to items containing specific studios
            </summary>
            <value>The studios.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Artists">
            <summary>
            Gets or sets the studios.
            </summary>
            <value>The studios.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Ids">
            <summary>
            Gets or sets the item ids.
            </summary>
            <value>The item ids.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.VideoTypes">
            <summary>
            Gets or sets the video types.
            </summary>
            <value>The video types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.MinOfficialRating">
            <summary>
            Gets or sets the min offical rating.
            </summary>
            <value>The min offical rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.Is3D">
            <summary>
            Gets or sets the video formats.
            </summary>
            <value>The video formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Api.BaseItemsRequest.SeriesStatus">
            <summary>
            Gets or sets the series status.
            </summary>
            <value>The series status.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseItemsRequest.GetAnyProviderIdEquals">
            <summary>
            Gets the AnyProviderIdEquals filter.
            </summary>
            <returns>Dictionary{string, string}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseItemsRequest.GetFilters">
            <summary>
            Gets the filters.
            </summary>
            <returns>IEnumerable{ItemFilter}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseItemsRequest.GetImageTypes">
            <summary>
            Gets the image types.
            </summary>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Api.BaseItemsRequest.GetOrderBy">
            <summary>
            Gets the order by.
            </summary>
            <returns>IEnumerable{ItemSortBy}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Api.IHasItemFields">
            <summary>
            Interface IHasItemFields
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Api.IHasItemFields.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Api.ItemFieldsExtensions">
            <summary>
            Class ItemFieldsExtensions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Api.ItemFieldsExtensions.GetItemFields(MediaBrowser.Controller.Api.IHasItemFields)">
            <summary>
            Gets the item fields.
            </summary>
            <param name="request">The request.</param>
            <returns>IEnumerable{ItemFields}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Authentication.AuthenticationResult.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Authentication.AuthenticationResult.SessionInfo">
            <summary>
            Gets or sets the session information.
            </summary>
            <value>The session information.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Authentication.AuthenticationResult.AccessToken">
            <summary>
            Gets or sets the authentication token.
            </summary>
            <value>The authentication token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Authentication.AuthenticationResult.ServerId">
            <summary>
            Gets or sets the server identifier.
            </summary>
            <value>The server identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.ChannelFeatures.ShowRootFoldersAtTopLevel">
            <summary>
            Gets or sets a value indicating whether the channel's root folders are shown as top-level folders.
            </summary>
            <value><c>true</c> to show root folders at the top level; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.ChannelFeatures.LibraryOptions">
            <summary>Gets or sets the library options for the channel.</summary>
            <value>The library options.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.IChannel.ParentalRating">
            <summary>
            Gets the parental rating.
            </summary>
            <value>The parental rating.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetChannelItems(MediaBrowser.Controller.Channels.InternalChannelItemQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the channel items.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetChannelImage(MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <summary>
            Gets the channel image.
            </summary>
            <param name="type">The type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{DynamicImageInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannel.GetSupportedChannelImages">
            <summary>
            Gets the supported channel images.
            </summary>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IChannelManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Channels.IChannel})">
            <summary>
            Adds the parts.
            </summary>
            <param name="channels">The channels.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IHasCacheKey.GetCacheKey(System.String)">
            <summary>
            Gets the cache key.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.MediaTypes">
            <summary>
            Gets or sets the media types.
            </summary>
            <value>The media types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.ContentTypes">
            <summary>
            Gets or sets the content types.
            </summary>
            <value>The content types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.MaxPageSize">
            <summary>
            Represents the maximum number of records the channel allows retrieving at a time
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.DefaultSortFields">
            <summary>
            Gets or sets the default sort orders.
            </summary>
            <value>The default sort orders.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.SupportsSortOrderToggle">
            <summary>
            Indicates if a sort ascending/descending toggle is supported or not.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.AutoRefreshLevels">
            <summary>
            Gets or sets the automatic refresh levels.
            </summary>
            <value>The automatic refresh levels.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.DailyDownloadLimit">
            <summary>
            Gets or sets the daily download limit.
            </summary>
            <value>The daily download limit.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Channels.InternalChannelFeatures.SupportsContentDownloading">
            <summary>
            Gets or sets a value indicating whether [supports downloading].
            </summary>
            <value><c>true</c> if [supports downloading]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Channels.IRequiresMediaInfoCallback.GetChannelItemMediaInfo(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the channel item media information.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Codecs.ICodecProvider">
            <summary>
            Objects implementing this interface will be detected at runtime.
            Executing <see cref="M:MediaBrowser.Controller.Codecs.ICodecProvider.GetCodecList"/> will allow a codec provider to a list of codecs that it has detected.
            </summary>
            <remarks>The purpose of this provider model is to allow platform specific detection implementations.
            </remarks>
        </member>
        <member name="M:MediaBrowser.Controller.Codecs.ICodecProvider.GetCodecList">
            <summary>A codec info provider implements this method to return a list of detected codecs.</summary>
            <returns>A list of codecs.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Codecs.ICodecProvider.IsApplicable">
            <summary>Indicates whether a codec info provider is applicable to the current platform and configuration</summary>
            <returns>
              <c>true</c> if the provider is applicable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionCreatedEventArgs.Collection">
            <summary>
            Gets or sets the collection.
            </summary>
            <value>The collection.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionCreatedEventArgs.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionModifiedEventArgs.Collection">
            <summary>
            Gets or sets the collection.
            </summary>
            <value>The collection.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Collections.CollectionModifiedEventArgs.ItemsChanged">
            <summary>
            Gets or sets the items changed.
            </summary>
            <value>The items changed.</value>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.CollectionCreated">
            <summary>
            Occurs when [collection created].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.ItemsAddedToCollection">
            <summary>
            Occurs when [items added to collection].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Collections.ICollectionManager.ItemsRemovedFromCollection">
            <summary>
            Occurs when [items removed from collection].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.CreateCollection(MediaBrowser.Controller.Collections.CollectionCreationOptions)">
            <summary>
            Creates the collection.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.AddToCollection(System.Int64,System.Int64[])">
            <summary>
            Adds to collection.
            </summary>
            <param name="collectionId">The collection identifier.</param>
            <param name="itemIds">The item ids.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Collections.ICollectionManager.RemoveFromCollection(MediaBrowser.Controller.Entities.BoxSet,System.Int64[])">
            <summary>
            Removes from collection.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager">
            <summary>
            Interface IServerConfigurationManager
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Configuration.IServerConfigurationManager.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Configuration.IServerConfigurationManager.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Connect.IConnectManager.LinkUser(MediaBrowser.Controller.Entities.User,System.String)">
            <summary>
            Links the user.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Connect.IConnectManager.RemoveConnect(MediaBrowser.Controller.Entities.User)">
            <summary>
            Removes the link.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Connect.IConnectManager.Authenticate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates the specified username.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Connect.IConnectManager.IsAuthorizationTokenValid(System.String)">
            <summary>
            Determines whether [is authorization token valid] [the specified token].
            </summary>
            <param name="token">The token.</param>
            <returns><c>true</c> if [is authorization token valid] [the specified token]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="E:MediaBrowser.Controller.Devices.IDeviceManager.CameraImageUploaded">
            <summary>
            Occurs when [camera image uploaded].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.SaveCapabilities(System.Int64,MediaBrowser.Model.Session.ClientCapabilities)">
            <summary>
            Saves the capabilities.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetCapabilities(System.Int64)">
            <summary>
            Gets the capabilities.
            </summary>
            <returns>ClientCapabilities.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetDevices(MediaBrowser.Model.Devices.DeviceQuery)">
            <summary>
            Gets the devices.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.GetCameraUploadHistory(System.Int64)">
            <summary>
            Gets the upload history.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <returns>ContentUploadHistory.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Devices.IDeviceManager.AcceptCameraUpload(System.Int64,System.IO.Stream,MediaBrowser.Model.Devices.LocalFileInfo,System.Threading.CancellationToken)">
            <summary>
            Accepts the upload.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportedInputFormats">
            <summary>
            Gets the supported input formats.
            </summary>
            <value>The supported input formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportedOutputFormats">
            <summary>
            Gets the supported output formats.
            </summary>
            <value>The supported output formats.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.EncodeImage(System.String,System.String,System.Boolean,System.Nullable{MediaBrowser.Model.Drawing.ImageOrientation},System.Int32,MediaBrowser.Controller.Drawing.ImageProcessingOptions,MediaBrowser.Model.Drawing.ImageFormat)">
            <summary>
            Encodes the image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageEncoder.CreateImageCollage(MediaBrowser.Controller.Drawing.ImageCollageOptions)">
            <summary>
            Creates the image collage.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportsImageCollageCreation">
            <summary>
            Gets a value indicating whether [supports image collage creation].
            </summary>
            <value><c>true</c> if [supports image collage creation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageEncoder.SupportsImageEncoding">
            <summary>
            Gets a value indicating whether [supports image encoding].
            </summary>
            <value><c>true</c> if [supports image encoding]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Drawing.IImageProcessor">
            <summary>
            Interface IImageProcessor
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageProcessor.SupportedFileExtensions">
            <summary>
            Gets the supported input formats.
            </summary>
            <value>The supported input formats.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageProcessor.ImageEnhancers">
            <summary>
            Gets the image enhancers.
            </summary>
            <value>The image enhancers.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageSize(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo)">
            <summary>Gets the size of the image.</summary>
            <param name="item">The item.</param>
            <param name="info">The information.</param>
            <returns>ImageSize.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageEnhancer})">
            <summary>
            Adds the parts.
            </summary>
            <param name="enhancers">The enhancers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetSupportedEnhancers(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType)">
            <summary>
            Gets the supported enhancers.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetImageCacheTag(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo)">
            <summary>
            Gets the image cache tag.
            </summary>
            <param name="item">The item.</param>
            <param name="image">The image.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.ProcessImage(MediaBrowser.Controller.Drawing.ImageProcessingOptions,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Processes the image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.ProcessImage(MediaBrowser.Controller.Drawing.ImageProcessingOptions,System.Threading.CancellationToken)">
            <summary>Processes the image.</summary>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetEnhancedImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Int32,System.Threading.CancellationToken)">
            <summary>Gets the enhanced image.</summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.GetSupportedImageOutputFormats">
            <summary>
            Gets the supported image output formats.
            </summary>
            <returns>ImageOutputFormat[].</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Drawing.IImageProcessor.CreateImageCollage(MediaBrowser.Controller.Drawing.ImageCollageOptions,System.Threading.CancellationToken)">
            <summary>Creates the image collage.</summary>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.IImageProcessor.SupportsImageCollageCreation">
            <summary>
            Gets a value indicating whether [supports image collage creation].
            </summary>
            <value><c>true</c> if [supports image collage creation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.Images">
            <summary>
            Gets or sets the input paths.
            </summary>
            <value>The input paths.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.OutputPath">
            <summary>
            Gets or sets the output path.
            </summary>
            <value>The output path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageCollageOptions.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageStream.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Drawing.ImageStream.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Dto.IDtoService">
            <summary>
            Interface IDtoService
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.AttachPrimaryImageAspectRatio(MediaBrowser.Model.Dto.IItemDto,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Attaches the primary image aspect ratio.
            </summary>
            <param name="dto">The dto.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetPrimaryImageAspectRatio(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the primary image aspect ratio.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Nullable&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetBaseItemDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the base item dto.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Dto.IDtoService.GetItemByNameDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions,MediaBrowser.Controller.Entities.User,MediaBrowser.Model.Dto.ItemCounts)">
            <summary>
            Gets the item by name dto.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.AggregateFolder">
            <summary>
            Specialized folder that can have items added to it's children by external entities.
            Used for our RootFolder so plug-ins can add items.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.Audio">
            <summary>
            Class Audio
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.ArtistItems">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.Composers">
            <summary>
            Gets or sets the composers.
            </summary>
            <value>The composers.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.AlbumArtistItems">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.Audio.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicAlbum">
            <summary>
            Class MusicAlbum
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.AlbumArtistItems">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.ArtistItems">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicAlbum.Composers">
            <summary>
            Gets or sets the composers.
            </summary>
            <value>The composers.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicArtist">
            <summary>
            Class MusicArtist
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicArtist.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Audio.MusicGenre">
            <summary>
            Class MusicGenre
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Audio.MusicGenre.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.BaseItem">
            <summary>
            Class BaseItem
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsSecondaryMergedItemInSameFolder">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.MediaStreams">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.AdditionalPartCount">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.LocalTrailerCount">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.SpecialFeatureCount">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.BaseItem.SupportedImageExtensions">
            <summary>
            The supported image extensions
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Entities.BaseItem.TrailerFolderName">
            <summary>
            The trailer folder name
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Album">
            <summary>
            Gets or sets the album.
            </summary>
            <value>The album.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsInMixedFolder">
            <summary>
            Gets a value indicating whether this instance is in mixed folder.
            </summary>
            <value><c>true</c> if this instance is in mixed folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.OwnsFolder">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.OriginalParsedName">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsNameParsedFromFolder">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DisplayPreferencesId">
            <summary>
            Return the id that should be used to key display prefs for this item.
            Default is based on the type for everything except actual generic folders.
            </summary>
            <value>The display prefs id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ExternalId">
            <summary>
            If this content came from an external service, the id of the content on that service
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.LocationType">
            <summary>
            Gets or sets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.PrimaryImagePath">
            <summary>
            This is just a helper for convenience
            </summary>
            <value>The primary image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.LockedFields">
            <summary>
            Gets or sets the locked fields.
            </summary>
            <value>The locked fields.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.SortName">
            <summary>
            Gets the name of the sort.
            </summary>
            <value>The name of the sort.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.SetSortNameDirect(System.String)">
            <summary>
            An optimization to avoid processing a value that's already been processed
            </summary>
            <param name="sortName"></param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.CreateSortName">
            <summary>
            Creates the name of the sort.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.FindParent``1">
            <summary>
            Finds a parent of a given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns>``0.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.PremiereDate">
            <summary>
            When the item first debuted. For movies this could be premiere date, episodes would be first aired
            </summary>
            <value>The premiere date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CriticRating">
            <summary>
            Gets or sets the critic rating.
            </summary>
            <value>The critic rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CustomRating">
            <summary>
            Gets or sets the custom rating.
            </summary>
            <value>The custom rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.StudioItems">
            <summary>
            Gets or sets the studios.
            </summary>
            <value>The studios.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.GenreItems">
            <summary>
            Gets or sets the genres.
            </summary>
            <value>The genres.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.TagItems">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.Collections">
            <summary>
            Gets or sets the collections.
            </summary>
            <value>The collections.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.RunTimeTicks">
            <summary>
            Gets or sets the run time ticks.
            </summary>
            <value>The run time ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ProductionYear">
            <summary>
            Gets or sets the production year.
            </summary>
            <value>The production year.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IndexNumber">
            <summary>
            If the item is part of a series, this is it's number in the series.
            This could be episode number, album track number, etc.
            </summary>
            <value>The index number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ParentIndexNumber">
            <summary>
            For an episode this could be the season number, or for a song this could be the disc number.
            </summary>
            <value>The parent index number.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetMediaSources(System.Boolean,System.Boolean,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            GetMediaSources
            This overload is for CoverArt
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.RefreshMetadata(MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Overrides the base implementation to refresh metadata for local trailers
            </summary>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>true if a provider reports we changed</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ProviderIds">
            <summary>
            Gets or sets the provider ids.
            </summary>
            <value>The provider ids.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetPreferredMetadataLanguage(MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Gets the preferred metadata language.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetPreferredMetadataCountryCode(MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Gets the preferred metadata language.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetInheritedParentalRatingValue">
            <summary>
            Only used by plugins at this point
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.IsVisible(MediaBrowser.Controller.Entities.User)">
            <summary>
            Determines if this folder should be visible to a given user.
            Default is just parental allowed. Can be overridden for more functionality.
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if the specified user is visible; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
            <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddStudio(System.String)">
            <summary>
            Adds a studio to the item
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddGenre(System.String)">
            <summary>
            Adds a genre to the item
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.MarkPlayed(MediaBrowser.Controller.Entities.User,MediaBrowser.Controller.Entities.BaseItem[],System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Marks the played.
            </summary>
            <param name="user">The user.</param>
            <param name="datePlayed">The date played.</param>
            <param name="resetPosition">if set to <c>true</c> [reset position].</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.MarkUnplayed(MediaBrowser.Controller.Entities.User)">
            <summary>
            Marks the unplayed.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.HasImage(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets an image
            </summary>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns><c>true</c> if the specified type has image; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Backdrops should be accessed using Item.Backdrops</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.DeleteImage(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Deletes the image.
            </summary>
            <param name="type">The type.</param>
            <param name="index">The index.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetImagePath(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the image path.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetImageInfo(MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the image information.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>ItemImageInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.AddImages(MediaBrowser.Model.Entities.ImageType,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},System.Boolean)">
            <summary>
            Adds the images.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetDeletePaths(System.Boolean,MediaBrowser.Controller.Entities.BaseItem[])">
            <summary>
            Gets the file system path to delete when the item is to be deleted
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.UpdateRatingToItems(MediaBrowser.Controller.Entities.BaseItem[])">
            <summary>
            Updates the official rating based on content and returns true or false indicating if it changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.GetNonCachedChildren(MediaBrowser.Controller.Providers.IDirectoryService,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Get the children of this folder from the actual file system
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ValidateChildren(System.IProgress{System.Double},System.Threading.CancellationToken,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Boolean)">
            <summary>
            Validates that the children of the folder still exist
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BaseItem.ResolvedExtras">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ValidateChildrenInternal(System.IProgress{System.Double},System.Threading.CancellationToken,System.Boolean,System.Boolean,MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Model.Configuration.LibraryOptions,System.Collections.Generic.Dictionary{System.Int64,System.Boolean},MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Validates the children internal.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <param name="refreshChildMetadata">if set to <c>true</c> [refresh child metadata].</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="directoryService">The directory service.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItem.ValidateSubFolders(MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Model.Configuration.LibraryOptions,System.Collections.Generic.Dictionary{System.Int64,System.Boolean},MediaBrowser.Controller.Providers.IDirectoryService,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Refreshes the children.
            </summary>
            <param name="children">The children.</param>
            <param name="directoryService">The directory service.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.BaseItemExtensions.GetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType)">
            <summary>
            Gets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.BoxSet.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.CollectionFolder">
            <summary>
            Specialized Folder class that points to a subset of the physical folders in the system.
            It is created from the user-specific folders within the system root
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.CollectionFolder.DisplayPreferencesId">
            <summary>
            Allow different display preferences for each collection folder
            </summary>
            <value>The display prefs id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.CollectionFolder.PhysicalFolderIds">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Extensions">
            <summary>
            Class Extensions
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Extensions.AddTrailerUrl(MediaBrowser.Controller.Entities.BaseItem,System.String)">
            <summary>
            Adds the trailer URL.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Folder">
            <summary>
            Class Folder
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Folder.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
            <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.AddChild(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Adds the child.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetNonCachedChildren(MediaBrowser.Controller.Providers.IDirectoryService,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Get the children of this folder from the actual file system
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.GetRecursiveChildren">
            <summary>
            Gets the recursive children.
            </summary>
            <returns>IList{BaseItem}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.MarkPlayed(MediaBrowser.Controller.Entities.User,MediaBrowser.Controller.Entities.BaseItem[],System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Marks the played.
            </summary>
            <param name="user">The user.</param>
            <param name="datePlayed">The date played.</param>
            <param name="resetPosition">if set to <c>true</c> [reset position].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.Folder.MarkUnplayed(MediaBrowser.Controller.Entities.User)">
            <summary>
            Marks the unplayed.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Game.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.GameGenre.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.GameSystem">
            <summary>
            Class GameSystem
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.GameSystem.DisplayPreferencesId">
            <summary>
            Return the id that should be used to key display prefs for this item.
            Default is based on the type for everything except actual generic folders.
            </summary>
            <value>The display prefs id.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Genre">
            <summary>
            Class Genre
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Genre.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.ICollectionFolder">
            <summary>
            This is just a marker interface to denote top level folders
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.IHasSeries.FindSeriesName">
            <summary>
            Gets the name of the series.
            </summary>
            <value>The name of the series.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.IItemByName">
            <summary>
            Marker interface
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.InternalItemsQuery.SkipAncestorNormalization">
            <summary>
            An optimization for internal use only.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.ISupportsBoxSetGrouping">
            <summary>
            Marker interface to denote a class that supports being hidden underneath it's boxset.
            Just about anything can be placed into a boxset, 
            but movies should also only appear underneath and not outside separately (subject to configuration).
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.ItemImageInfo.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Movies.Movie">
            <summary>
            Class Movie
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.MusicVideo.ArtistItems">
            <summary>
            Gets or sets the artists.
            </summary>
            <value>The artists.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.MusicVideo.Composers">
            <summary>
            Gets or sets the composers.
            </summary>
            <value>The composers.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Person">
            <summary>
            This is the full Person object that can be retrieved with all of it's data.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Person.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.PersonInfo">
            <summary>
            This is the small Person stub that is attached to BaseItems
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>The role.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.PersonInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.PersonInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Studio">
            <summary>
            Class Studio
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Studio.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Tag.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Trailer">
            <summary>
            Class Trailer
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Episode">
            <summary>
            Class Episode
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.SortIndexNumber">
            <summary>
            Gets the season in which it aired.
            </summary>
            <value>The aired season.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.IndexNumberEnd">
            <summary>
            This is the ending episode number for double episodes.
            </summary>
            <value>The index number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Episode.Series">
            <summary>
            This Episode's Series Instance
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Episode.ContainsEpisodeNumber(System.Int32)">
            <summary>
            Determines whether [contains episode number] [the specified number].
            </summary>
            <param name="number">The number.</param>
            <returns><c>true</c> if [contains episode number] [the specified number]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Season">
            <summary>
            Class Season
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Season.Series">
            <summary>
            This Episode's Series Instance
            </summary>
            <value>The series.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.GetEpisodes(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the episodes.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.GetLookupInfo(MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Gets the lookup information.
            </summary>
            <returns>SeasonInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.TV.Season.BeforeMetadataRefresh(System.Boolean)">
            <summary>
            This is called before any metadata refresh and returns true or false indicating if changes were made
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Season.LocationType">
            <summary>
            Gets or sets the type of the location.
            </summary>
            <value>The type of the location.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.TV.Series">
            <summary>
            Class Series
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.DisplayOrder">
            <summary>
            airdate, dvd or absolute
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.TV.Series.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.User">
            <summary>
            Class User
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.UsesIdForConfigurationPath">
            <summary>
            From now on all user paths will be Id-based. 
            This is for backwards compatibility.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.LastLoginDate">
            <summary>
            Gets or sets the last login date.
            </summary>
            <value>The last login date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
            <value>The last activity date.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.User.Rename(System.String)">
            <summary>
            Renames the user.
            </summary>
            <param name="newName">The new name.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.User.ConfigurationDirectoryPath">
            <summary>
            Gets the path to the user's configuration directory
            </summary>
            <value>The configuration directory path.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Entities.User.GetConfigurationDirectoryPath(System.String)">
            <summary>
            Gets the configuration directory path.
            </summary>
            <param name="username">The username.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.UserItemData">
            <summary>
            Class UserItemData
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.PlaybackPositionTicks">
            <summary>
            Gets or sets the playback position ticks.
            </summary>
            <value>The playback position ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.PlayCount">
            <summary>
            Gets or sets the play count.
            </summary>
            <value>The play count.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.IsFavorite">
            <summary>
            Gets or sets a value indicating whether this instance is favorite.
            </summary>
            <value><c>true</c> if this instance is favorite; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.LastPlayedDate">
            <summary>
            Gets or sets the last played date.
            </summary>
            <value>The last played date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.Played">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MediaBrowser.Controller.Entities.UserItemData" /> is played.
            </summary>
            <value><c>true</c> if played; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.AudioStreamIndex">
            <summary>
            Gets or sets the index of the audio stream.
            </summary>
            <value>The index of the audio stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.UserItemData.SubtitleStreamIndex">
            <summary>
            Gets or sets the index of the subtitle stream.
            </summary>
            <value>The index of the subtitle stream.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.UserRootFolder">
            <summary>
            Special class used for User Roots.  Children contain actual ones defined for this user
            PLUS the virtual folders from the physical root (added by plug-ins).
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Entities.Video">
            <summary>
            Class Video
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.Video3DFormat">
            <summary>
            Gets or sets the video3 D format.
            </summary>
            <value>The video3 D format.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.Is3D">
            <summary>
            Gets a value indicating whether [is3 D].
            </summary>
            <value><c>true</c> if [is3 D]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Entities.Video.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>The type of the media.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Extensions.StringExtensions">
            <summary>
            Class BaseExtensions
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.IServerApplicationHost">
            <summary>
            Interface IServerApplicationHost
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetSystemInfo(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Gets the system info.
            </summary>
            <returns>SystemInfo.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.SupportsAutoRunAtStartup">
            <summary>
            Gets a value indicating whether [supports automatic run at startup].
            </summary>
            <value><c>true</c> if [supports automatic run at startup]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HttpPort">
            <summary>
            Gets the HTTP server port.
            </summary>
            <value>The HTTP server port.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HttpsPort">
            <summary>
            Gets the HTTPS port.
            </summary>
            <value>The HTTPS port.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.EnableHttps">
            <summary>
            Gets a value indicating whether [supports HTTPS].
            </summary>
            <value><c>true</c> if [supports HTTPS]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.HasUpdateAvailable">
            <summary>
            Gets a value indicating whether this instance has update available.
            </summary>
            <value><c>true</c> if this instance has update available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.FriendlyName">
            <summary>
            Gets the name of the friendly.
            </summary>
            <value>The name of the friendly.</value>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLocalIpAddresses(System.Threading.CancellationToken)">
            <summary>
            Gets the local ip address.
            </summary>
            <value>The local ip address.</value>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLocalApiUrl(System.Threading.CancellationToken)">
            <summary>
            Gets the local API URL.
            </summary>
            <value>The local API URL.</value>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLocalApiUrl(System.String)">
            <summary>
            Gets the local API URL.
            </summary>
            <param name="host">The host.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.IServerApplicationHost.GetLocalApiUrl(System.Net.IPAddress)">
            <summary>
            Gets the local API URL.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.PluginConfigurationPages">
            <summary>
            Gets or sets the plugin configuration pages.
            </summary>
            <value>The plugin configuration pages.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationHost.CodecProviders">
            <summary>
            Gets the codec providers.
            </summary>
            <value>The codec providers.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.RootFolderPath">
            <summary>
            Gets the path to the base root media directory
            </summary>
            <value>The root folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.ApplicationResourcesPath">
            <summary>
            Gets the application resources path. This is the path to the folder containing resources that are deployed as part of the application
            For example, this folder contains dashboard-ui and swagger-ui
            </summary>
            <value>The application resources path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.UserConfigurationDirectoryPath">
            <summary>
            Gets the path to the user configuration directory
            </summary>
            <value>The user configuration directory path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.TranscodingTempPath">
            <summary>
            Gets the transcoding temporary path.
            </summary>
            <value>The transcoding temporary path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.SubtitleFontsPath">
            <summary>Gets the subtitle fonts path.</summary>
            <value>The subtitle fonts path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.OcrDataPath">
            <summary>Gets the ocr model path.</summary>
            <value>The ocr model path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.IServerApplicationPaths.InternalMetadataPath">
            <summary>
            Gets the internal metadata path.
            </summary>
            <value>The internal metadata path.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IIntroProvider">
            <summary>
            Class BaseIntroProvider
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IIntroProvider.GetIntros(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IIntroProvider.GetAllIntroFiles">
            <summary>
            Gets all intro files.
            </summary>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IIntroProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ILibraryManager">
            <summary>
            Interface ILibraryManager
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ResolvePaths(MediaBrowser.Model.IO.FileSystemMetadata[],MediaBrowser.Controller.Providers.IDirectoryService,MediaBrowser.Controller.Entities.Folder,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Resolves a set of files into a list of BaseItem
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ILibraryManager.RootFolder">
            <summary>
            Gets the root folder.
            </summary>
            <value>The root folder.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FindByPath(System.String,System.Nullable{System.Boolean})">
            <summary>Finds the by path.</summary>
            <param name="path">The path.</param>
            <param name="isFolder">The is folder.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ValidatePeople(System.Threading.CancellationToken,System.IProgress{System.Double})">
            <summary>
            Validate and refresh the People sub-set of the IBN.
            The items are stored in the db but not loaded into memory until actually requested by an operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="progress">The progress.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ValidateMediaLibrary(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Reloads the root media folder
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.QueueLibraryScan">
            <summary>
            Queues the library scan.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetVirtualFolders">
            <summary>
            Gets the default view.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemById(System.Guid)">
            <summary>
            Gets the item by id.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetIntros(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetAllIntroFiles">
            <summary>
            Gets all intro files.
            </summary>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Resolvers.IItemResolver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IIntroProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.ILibraryPostScanTask},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.ILazyImageProvider})">
            <summary>
            Adds the parts.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetUserRootFolder">
            <summary>
            Gets the user root folder.
            </summary>
            <returns>UserRootFolder.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.CreateItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem[])">
            <summary>
            Creates the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.CreateItems(System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Entities.BaseItem[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates the items.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.UpdateItems(System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Updates the item.
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemAdded">
            <summary>
            Occurs when [item added].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemUpdated">
            <summary>
            Occurs when [item updated].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.ILibraryManager.ItemRemoved">
            <summary>
            Occurs when [item removed].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions,System.Boolean)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.DeleteItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.DeleteOptions,MediaBrowser.Controller.Entities.BaseItem,System.Boolean)">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNamedView(System.String,System.String,System.Boolean)">
            <summary>Gets the named view.</summary>
            <param name="name">The name.</param>
            <param name="viewType">Type of the view.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IsVideoFile(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is video file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is video file] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IsAudioFile(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is audio file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is audio file] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetSeasonNumberFromPath(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the season number from path.
            </summary>
            <param name="path">The path.</param>
            <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.FillMissingEpisodeNumbersFromPath(MediaBrowser.Controller.Entities.TV.Episode,System.Boolean)">
            <summary>
            Fills the missing episode numbers from path.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ParseName(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses the name.
            </summary>
            <param name="name">The name.</param>
            <returns>ItemInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetNewItemId(System.String,System.Type)">
            <summary>
            Gets the new item identifier.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetCollectionFolders(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the collection folders.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemPeople(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the people.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemPeople(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.UpdatePeople(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo},System.Boolean)">
            <summary>
            Updates the people.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemIds(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;Guid&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.QueryItems(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Queries the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.SubstitutePath(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Substitutes the path.
            </summary>
            <param name="path">The path.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.ConvertImageToLocal(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.ItemImageInfo,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Converts the image to local.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.GetItemsResult(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items result.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryManager.IgnoreFile(MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Ignores the file.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChangeBeginning(System.String)">
            <summary>
            Reports the file system change beginning.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChangeComplete(System.String,System.Boolean)">
            <summary>
            Reports the file system change complete.
            </summary>
            <param name="path">The path.</param>
            <param name="refreshPath">if set to <c>true</c> [refresh path].</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.ReportFileSystemChanged(System.String)">
            <summary>
            Reports the file system changed.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryMonitor.IsPathLocked(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether [is path locked] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if [is path locked] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ILibraryPostScanTask">
            <summary>
            An interface for tasks that run after the media library scan
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ILibraryPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMediaSourceProvider})">
            <summary>
            Adds the parts.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaStreams(System.Int64)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaStreams(MediaBrowser.Controller.Persistence.MediaStreamQuery)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetStaticMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Boolean,MediaBrowser.Model.Dlna.DeviceProfile,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the static media sources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetMediaSource(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the static media source.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.OpenLiveStream(MediaBrowser.Model.MediaInfo.LiveStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Opens the media source.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;MediaSourceInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.GetLiveStreamMediaSource(System.String)">
            <summary>
            Gets the live stream.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceManager.CloseLiveStream(System.String)">
            <summary>
            Closes the media source.
            </summary>
            <param name="id">The live stream identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceProvider.GetMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the media sources.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMediaSourceProvider.OpenMediaSource(System.String,System.Collections.Generic.List{MediaBrowser.Controller.Library.ILiveStream},System.Threading.CancellationToken)">
            <summary>
            Opens the media source.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IMetadataSaver">
            <summary>
            Interface IMetadataSaver
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IMetadataSaver.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMetadataSaver.IsEnabledFor(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Determines whether [is enabled for] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <returns><c>true</c> if [is enabled for] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMetadataSaver.Save(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Saves the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMusicManager.GetInstantMixFromItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.User,System.Nullable{System.Int32},MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the instant mix from song.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IMusicManager.GetInstantMixFromGenres(System.String[],MediaBrowser.Controller.Entities.User,System.Nullable{System.Int32},MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the instant mix from genre.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IntroInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IntroInfo.ItemId">
            <summary>
            Gets or sets the item id.
            </summary>
            <value>The item id.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ItemChangeEventArgs">
            <summary>
            Class ItemChangeEventArgs
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemChangeEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemChangeEventArgs.UpdateReason">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ItemResolveArgs">
            <summary>
            These are arguments relating to the file system that are collected once and then referred to
            whenever needed.  Primarily for entity resolution.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.#ctor(MediaBrowser.Controller.Providers.IDirectoryService,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Library.ItemResolveArgs" /> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.FileInfo">
            <summary>
            Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.ItemResolveArgs.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value><c>true</c> if this instance is directory; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ItemResolveArgs.ContainsFileSystemEntryByName(System.String,System.Boolean)">
            <summary>
            Determines whether [contains file system entry by name] [the specified name].
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IUserDataManager">
            <summary>
            Interface IUserDataManager
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.IUserDataManager.UserDataSaved">
            <summary>
            Occurs when [user data saved].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.GetUserDataDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the user data dto.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.GetAllUserData(System.Int64)">
            <summary>
            Get all user data for the given user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.SaveAllUserData(System.Int64,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <summary>
            Save the all provided user data for the given user
            </summary>
            <param name="userId"></param>
            <param name="userData"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserDataManager.UpdatePlayState(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Entities.UserItemData,System.Nullable{System.Int64})">
            <summary>
            Updates playstate for an item and returns true or false indicating if it was played to completion
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.IUserManager">
            <summary>
            Interface IUserManager
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.IUserManager.Users">
            <summary>
            Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="E:MediaBrowser.Controller.Library.IUserManager.UserUpdated">
            <summary>
            Occurs when [user updated].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Library.IUserManager.UserDeleted">
            <summary>
            Occurs when [user deleted].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserById(System.Guid)">
            <summary>
            Gets a User by Id
            </summary>
            <param name="id">The id.</param>
            <returns>User.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserById(System.String)">
            <summary>
            Gets the user by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>User.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserByName(System.String)">
            <summary>
            Gets the name of the user by.
            </summary>
            <param name="name">The name.</param>
            <returns>User.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.RefreshUsersMetadata(System.Threading.CancellationToken)">
            <summary>
            Refreshes metadata for each user
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.RenameUser(MediaBrowser.Controller.Entities.User,System.String)">
            <summary>
            Renames the user.
            </summary>
            <param name="user">The user.</param>
            <param name="newName">The new name.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateUser(MediaBrowser.Controller.Entities.User)">
            <summary>
            Updates the user.
            </summary>
            <param name="user">The user.</param>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.CreateUser(System.String,MediaBrowser.Model.Users.UserPolicy)">
            <summary>Creates the user.</summary>
            <param name="name">The name.</param>
            <param name="userPolicy">The user policy.</param>
            <returns>User.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.DeleteUser(MediaBrowser.Controller.Entities.User)">
            <summary>
            Deletes the user.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ResetPassword(MediaBrowser.Controller.Entities.User)">
            <summary>
            Resets the password.
            </summary>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.ChangePassword(MediaBrowser.Controller.Entities.User,System.String)">
            <summary>
            Changes the password.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserDto(MediaBrowser.Controller.Entities.User)">
            <summary>Gets the user dto.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserDto(MediaBrowser.Controller.Entities.User,System.Boolean)">
            <summary>Gets the user dto.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.AuthenticateUser(System.String,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.StartForgotPasswordProcess(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the forgot password process.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.RedeemPasswordResetPin(System.String)">
            <summary>
            Redeems the password reset pin.
            </summary>
            <param name="pin">The pin.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserPolicy(MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the user policy.
            </summary>
            <param name="user">The user.</param>
            <returns>UserPolicy.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.GetUserConfiguration(MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the user configuration.
            </summary>
            <param name="user">The user.</param>
            <returns>UserConfiguration.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateConfiguration(System.Int64,MediaBrowser.Model.Configuration.UserConfiguration)">
            <summary>
            Updates the configuration.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="newConfiguration">The new configuration.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.UpdateUserPolicy(System.Int64,MediaBrowser.Model.Users.UserPolicy)">
            <summary>
            Updates the user policy.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="userPolicy">The user policy.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.IUserManager.MakeValidUsername(System.String)">
            <summary>
            Makes the valid username.
            </summary>
            <param name="username">The username.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Library.PlaybackProgressEventArgs">
            <summary>
            Holds information about a playback progress event
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.PlaybackStopEventArgs.PlayedToCompletion">
            <summary>
            Gets or sets a value indicating whether [played to completion].
            </summary>
            <value><c>true</c> if [played to completion]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Library.Profiler">
            <summary>
            Class Profiler
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._stopwatch">
            <summary>
            The stopwatch
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Library.Profiler._logger">
            <summary>
            The _logger
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.#ctor(System.String,MediaBrowser.Model.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Library.Profiler" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.Profiler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MediaBrowser.Controller.Library.ResolverHelper">
            <summary>
            Class ResolverHelper
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ResolverHelper.SetInitialItemValues(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.Folder,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>
            Sets the initial item values.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ResolverHelper.SetInitialItemValues(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemResolveArgs,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>
            Sets the initial item values.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ResolverHelper.EnsureName(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.IO.FileSystemMetadata)">
            <summary>
            Ensures the name.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Library.ResolverHelper.EnsureDates(MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemResolveArgs,MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>
            Ensures DateCreated and DateModified have values
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Library.UserDataSaveEventArgs">
            <summary>
            Class UserDataSaveEventArgs
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.User">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.SaveReason">
            <summary>
            Gets or sets the save reason.
            </summary>
            <value>The save reason.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Library.UserDataSaveEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.ChannelInfo">
            <summary>
            Class ChannelInfo
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.Id">
            <summary>
            Get or sets the Id.
            </summary>
            <value>The id of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.TunerHostId">
            <summary>
            Gets or sets the tuner host identifier.
            </summary>
            <value>The tuner host identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.ChannelType">
            <summary>
            Gets or sets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ChannelInfo.IsFavorite">
            <summary>
            Gets or sets a value indicating whether this instance is favorite.
            </summary>
            <value><c>null</c> if [is favorite] contains no value, <c>true</c> if [is favorite]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.ILiveTvManager">
            <summary>
            Manages all live tv services installed on the server
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetNewTimerDefaults">
            <summary>
            Gets the new timer defaults asynchronous.
            </summary>
            <returns>Task{TimerInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetNewTimerDefaults(System.String)">
            <summary>
            Gets the new timer defaults.
            </summary>
            <returns>Task{SeriesTimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CancelTimer(System.String)">
            <summary>
            Cancels the timer.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CancelSeriesTimer(System.String)">
            <summary>
            Cancels the series timer.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.LiveTv.ITunerHost},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.LiveTv.IListingsProvider})">
            <summary>
            Adds the parts.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetTimer(System.ReadOnlyMemory{System.Char})">
            <summary>
            Gets the timer.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{TimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetSeriesTimer(System.ReadOnlyMemory{System.Char})">
            <summary>
            Gets the series timer.
            </summary>
            <returns>Task{TimerInfoDto}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetRecordings(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the recordings.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetTimers(MediaBrowser.Model.LiveTv.TimerQuery)">
            <summary>
            Gets the timers.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{QueryResult{TimerInfoDto}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetSeriesTimers(MediaBrowser.Model.LiveTv.SeriesTimerQuery)">
            <summary>
            Gets the series timers.
            </summary>
            <returns>Task{QueryResult{SeriesTimerInfoDto}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetPrograms(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the programs.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.UpdateTimer(MediaBrowser.Model.LiveTv.TimerInfoDto)">
            <summary>
            Updates the timer.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.UpdateSeriesTimer(MediaBrowser.Controller.LiveTv.SeriesTimerInfo)">
            <summary>
            Updates the timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CreateTimer(MediaBrowser.Model.LiveTv.TimerInfoDto)">
            <summary>
            Creates the timer.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.CreateSeriesTimer(MediaBrowser.Controller.LiveTv.SeriesTimerInfo,System.Threading.CancellationToken)">
            <summary>
            Creates the series timer.
            </summary>
            <param name="timer">The timer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetGuideInfo">
            <summary>
            Gets the guide information.
            </summary>
            <returns>GuideInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetRecommendedPrograms(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>Gets the recommended programs.</summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetLiveTvInfo(System.Threading.CancellationToken)">
            <summary>
            Gets the live tv information.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{LiveTvInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetInternalLiveTvFolder(System.Boolean)">
            <summary>
            Gets the live tv folder.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.IsLiveTvEnabled(MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the enabled users.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetInternalChannels(MediaBrowser.Controller.Entities.InternalItemsQuery,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the internal channels.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetChannelMediaSources(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Gets the channel media sources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.AddInfoToProgramDto(System.Collections.Generic.List{System.Tuple{MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Dto.BaseItemDto}},MediaBrowser.Controller.Dto.DtoOptions,MediaBrowser.Controller.Entities.User)">
            <summary>Adds the information to program dto.</summary>
            <param name="programs">The programs.</param>
            <param name="options">The options.</param>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.SaveTunerHost(MediaBrowser.Model.LiveTv.TunerHostInfo,System.Threading.CancellationToken)">
            <summary>
            Saves the tuner host.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.SaveListingProvider(MediaBrowser.Model.LiveTv.ListingsProviderInfo,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the listing provider.
            </summary>
            <param name="info">The information.</param>
            <param name="validateLogin">if set to <c>true</c> [validate login].</param>
            <param name="validateListings">if set to <c>true</c> [validate listings].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.LiveTv.ILiveTvManager.GetLineups(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Gets the lineups.</summary>
            <param name="providerType">Type of the provider.</param>
            <param name="providerId">The provider identifier.</param>
            <param name="country">The country.</param>
            <param name="location">The location.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;List&lt;NameIdPair&gt;&gt;.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ITunerHost.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ITunerHost.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvChannel.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="T:MediaBrowser.Controller.LiveTv.LiveTvConflictException">
            <summary>
            Class LiveTvConflictException.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.StartDate">
            <summary>
            The start date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvProgram.ContainingFolderPath">
            <summary>
            Returns the folder containing the item.
            If the item is a folder, it returns the folder itself
            </summary>
            <value>The containing folder path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.StatusMessage">
            <summary>
            Gets or sets the status message.
            </summary>
            <value>The status message.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.HasUpdateAvailable">
            <summary>
            Gets or sets a value indicating whether this instance has update available.
            </summary>
            <value><c>true</c> if this instance has update available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.Tuners">
            <summary>
            Gets or sets the tuners.
            </summary>
            <value>The tuners.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
            <value>The channel identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.RecordingId">
            <summary>
            Gets or sets the recording identifier.
            </summary>
            <value>The recording identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.ProgramName">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>The name of the program.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.Clients">
            <summary>
            Gets or sets the clients.
            </summary>
            <value>The clients.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.CanReset">
            <summary>
            Gets or sets a value indicating whether this instance can reset.
            </summary>
            <value><c>true</c> if this instance can reset; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Id">
            <summary>
            Id of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ChannelId">
            <summary>
            Gets or sets the channel identifier.
            </summary>
            <value>The channel identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Name">
            <summary>
            Name of the program
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ShortOverview">
            <summary>
            Gets or sets the short overview.
            </summary>
            <value>The short overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.StartDate">
            <summary>
            The start date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EndDate">
            <summary>
            The end date of the program, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Genres">
            <summary>
            Genre of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.OriginalAirDate">
            <summary>
            Gets or sets the original air date.
            </summary>
            <value>The original air date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsHD">
            <summary>
            Gets or sets a value indicating whether this instance is hd.
            </summary>
            <value><c>true</c> if this instance is hd; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Audio">
            <summary>
            Gets or sets the audio.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ProductionYear">
            <summary>
            Gets or sets the production year.
            </summary>
            <value>The production year.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.HomePageUrl">
            <summary>
            Gets or sets the home page URL.
            </summary>
            <value>The home page URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.SeriesId">
            <summary>
            Gets or sets the series identifier.
            </summary>
            <value>The series identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.ShowId">
            <summary>
            Gets or sets an Id for the content that will always be the same regarless of air time or channel
            </summary>
            <value>The show identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.SeasonNumber">
            <summary>
            Gets or sets the season number.
            </summary>
            <value>The season number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.EpisodeNumber">
            <summary>
            Gets or sets the episode number.
            </summary>
            <value>The episode number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.ProgramInfo.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.SeriesTimerId">
            <summary>
            Gets or sets the series timer identifier.
            </summary>
            <value>The series timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.TimerId">
            <summary>
            Gets or sets the timer identifier.
            </summary>
            <value>The timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ChannelType">
            <summary>
            Gets or sets the type of the channel.
            </summary>
            <value>The type of the channel.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Overview">
            <summary>
            Gets or sets the overview.
            </summary>
            <value>The overview.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Genres">
            <summary>
            Genre of the program.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value><c>true</c> if this instance is repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.EpisodeTitle">
            <summary>
            Gets or sets the episode title.
            </summary>
            <value>The episode title.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsHD">
            <summary>
            Gets or sets a value indicating whether this instance is hd.
            </summary>
            <value><c>true</c> if this instance is hd; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.Audio">
            <summary>
            Gets or sets the audio.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.OriginalAirDate">
            <summary>
            Gets or sets the original air date.
            </summary>
            <value>The original air date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsMovie">
            <summary>
            Gets or sets a value indicating whether this instance is movie.
            </summary>
            <value><c>true</c> if this instance is movie; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsSports">
            <summary>
            Gets or sets a value indicating whether this instance is sports.
            </summary>
            <value><c>true</c> if this instance is sports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsSeries">
            <summary>
            Gets or sets a value indicating whether this instance is series.
            </summary>
            <value><c>true</c> if this instance is series; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsNews">
            <summary>
            Gets or sets a value indicating whether this instance is news.
            </summary>
            <value><c>true</c> if this instance is news; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsKids">
            <summary>
            Gets or sets a value indicating whether this instance is kids.
            </summary>
            <value><c>true</c> if this instance is kids; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.IsPremiere">
            <summary>
            Gets or sets a value indicating whether this instance is premiere.
            </summary>
            <value><c>true</c> if this instance is premiere; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.OfficialRating">
            <summary>
            Gets or sets the official rating.
            </summary>
            <value>The official rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.CommunityRating">
            <summary>
            Gets or sets the community rating.
            </summary>
            <value>The community rating.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ImagePath">
            <summary>
            Supply the image path if it can be accessed directly from the file system
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ImageUrl">
            <summary>
            Supply the image url if it can be downloaded
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.HasImage">
            <summary>
            Gets or sets a value indicating whether this instance has image.
            </summary>
            <value><c>null</c> if [has image] contains no value, <c>true</c> if [has image]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.ShowId">
            <summary>
            Gets or sets the show identifier.
            </summary>
            <value>The show identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.RecordingInfo.DateLastUpdated">
            <summary>
            Gets or sets the date last updated.
            </summary>
            <value>The date last updated.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Overview">
            <summary>
            Description of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.RecordAnyTime">
            <summary>
            Gets or sets a value indicating whether [record any time].
            </summary>
            <value><c>true</c> if [record any time]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.RecordNewOnly">
            <summary>
            Gets or sets a value indicating whether [record new only].
            </summary>
            <value><c>true</c> if [record new only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.PrePaddingSeconds">
            <summary>
            Gets or sets the pre padding seconds.
            </summary>
            <value>The pre padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.PostPaddingSeconds">
            <summary>
            Gets or sets the post padding seconds.
            </summary>
            <value>The post padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.IsPrePaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is pre padding required.
            </summary>
            <value><c>true</c> if this instance is pre padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.IsPostPaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is post padding required.
            </summary>
            <value><c>true</c> if this instance is post padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.SeriesTimerInfo.SeriesId">
            <summary>
            Gets or sets the series identifier.
            </summary>
            <value>The series identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Id">
            <summary>
            Id of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.SeriesTimerId">
            <summary>
            Gets or sets the series timer identifier.
            </summary>
            <value>The series timer identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.ChannelId">
            <summary>
            ChannelId of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.ProgramId">
            <summary>
            Gets or sets the program identifier.
            </summary>
            <value>The program identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Name">
            <summary>
            Name of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Overview">
            <summary>
            Description of the recording.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.StartDate">
            <summary>
            The start date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.EndDate">
            <summary>
            The end date of the recording, in UTC.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.PrePaddingSeconds">
            <summary>
            Gets or sets the pre padding seconds.
            </summary>
            <value>The pre padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.PostPaddingSeconds">
            <summary>
            Gets or sets the post padding seconds.
            </summary>
            <value>The post padding seconds.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsPrePaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is pre padding required.
            </summary>
            <value><c>true</c> if this instance is pre padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsPostPaddingRequired">
            <summary>
            Gets or sets a value indicating whether this instance is post padding required.
            </summary>
            <value><c>true</c> if this instance is post padding required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.EpisodeNumber">
            <summary>
            Gets or sets the episode number.
            </summary>
            <value>The episode number.</value>
        </member>
        <member name="P:MediaBrowser.Controller.LiveTv.TimerInfo.IsLive">
            <summary>
            Gets or sets a value indicating whether this instance is live.
            </summary>
            <value><c>true</c> if this instance is live; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioCodec">
            <summary>
            Gets or sets the audio codec.
            </summary>
            <value>The audio codec.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioSampleRate">
            <summary>
            Gets or sets the audio sample rate.
            </summary>
            <value>The audio sample rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioBitRate">
            <summary>
            Gets or sets the audio bit rate.
            </summary>
            <value>The audio bit rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioChannels">
            <summary>
            Gets or sets the audio channels.
            </summary>
            <value>The audio channels.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.StartTimeTicks">
            <summary>
            Gets or sets the start time ticks.
            </summary>
            <value>The start time ticks.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.MaxWidth">
            <summary>
            Gets or sets the width of the max.
            </summary>
            <value>The width of the max.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.MaxHeight">
            <summary>
            Gets or sets the height of the max.
            </summary>
            <value>The height of the max.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoBitRate">
            <summary>
            Gets or sets the video bit rate.
            </summary>
            <value>The video bit rate.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.SubtitleStreamIndex">
            <summary>
            Gets or sets the index of the subtitle stream.
            </summary>
            <value>The index of the subtitle stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoCodec">
            <summary>
            Gets or sets the video codec.
            </summary>
            <value>The video codec.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.AudioStreamIndex">
            <summary>
            Gets or sets the index of the audio stream.
            </summary>
            <value>The index of the audio stream.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.VideoStreamIndex">
            <summary>
            Gets or sets the index of the video stream.
            </summary>
            <value>The index of the video stream.</value>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.ICodecParameterManager">
            <summary>Interface ICodecParameterManager.</summary>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IEncodingDiagnosticOptionsManager">
            <summary>Interface IEncodingDiagnosticOptionsManager.</summary>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IEncodingSubtitleOptionsManager">
            <summary>Interface IEncodingSubtitleOptionsManager.</summary>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IEncodingToneMapOptionsManager">
            <summary>Interface IEncodingToneMapOptionsManager.</summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.EncoderPath">
            <summary>
            Gets or sets the path to the ffmpeg executable.
            </summary>
            <value>The ffmpeg path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.ProbePath">
            <summary>
            Gets or sets the path to the ffprobe executable.
            </summary>
            <value>The ffprobe path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.DetectPath">
            <summary>
            Gets or sets the path to the ffdetect executable.
            </summary>
            <value>The ffdetect path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.ShowD3D9CodecVariants">
            <summary>
            Gets or sets a value indicating whether D3D9 codecs are shown.
            </summary>
            <value><c>true</c> if D3D9 codecs should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.EnvironmentVariables">
            <summary>Gets a dictionary for specifying required environment variables.</summary>
            <value>A <see cref="T:System.Collections.Specialized.StringDictionary"/>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IFfmpegManager">
            <summary>
            Interface IServerConfigurationManager
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegManager.FfmpegConfiguration">
            <summary>
            Gets the ffmpeg configuration.
            </summary>
            <value>The ffmpeg configuration.</value>
        </member>
        <member name="P:MediaBrowser.Controller.MediaEncoding.IFfmpegManager.FfmpegCapabilities">
            <summary>
            Gets the ffmpeg capabilities.
            </summary>
            <value>The ffmpeg capabilities.</value>
            <remarks>The setter is just a temporary workaround.</remarks>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager">
            <summary>Interface IImageExtractionManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractAudioImage(System.ReadOnlyMemory{System.Char},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Extracts the audio image.</summary>
            <param name="path">The path.</param>
            <param name="streamIndex">Index of the image stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractAudioImage(System.String,System.Nullable{MediaBrowser.Model.MediaInfo.MediaContainers},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Extracts the audio image.</summary>
            <param name="path">The path.</param>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the image stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractVideoImage(System.ReadOnlyMemory{System.Char},System.Nullable{MediaBrowser.Model.MediaInfo.MediaContainers},MediaBrowser.Model.MediaInfo.MediaProtocol,MediaBrowser.Model.Entities.MediaStream,System.Nullable{MediaBrowser.Model.Entities.Video3DFormat},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>Extracts the video image.</summary>
            <param name="inputPath">The input path.</param>
            <param name="container">The container.</param>
            <param name="protocol">The protocol.</param>
            <param name="videoStream">The video stream.</param>
            <param name="threedFormat">The threed format.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractVideoImage(System.ReadOnlyMemory{System.Char},System.Nullable{MediaBrowser.Model.MediaInfo.MediaContainers},MediaBrowser.Model.MediaInfo.MediaProtocol,MediaBrowser.Model.Entities.MediaStream,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Extracts the video image.</summary>
            <param name="inputPath">The input path.</param>
            <param name="container">The container.</param>
            <param name="protocol">The protocol.</param>
            <param name="imageStream">The image stream.</param>
            <param name="streamIndex">Index of the stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractVideoImagesOnInterval(System.ReadOnlyMemory{System.Char},System.Nullable{MediaBrowser.Model.MediaInfo.MediaContainers},MediaBrowser.Model.Entities.MediaStream,MediaBrowser.Model.MediaInfo.MediaProtocol,System.Nullable{MediaBrowser.Model.Entities.Video3DFormat},System.TimeSpan,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Extracts the video images on interval.</summary>
            <param name="inputPath">The input path.</param>
            <param name="container">The container.</param>
            <param name="videoStream">The video stream.</param>
            <param name="protocol">The protocol.</param>
            <param name="threedFormat">The threed format.</param>
            <param name="interval">The interval.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="filenamePrefix">The filename prefix.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.ExtractVideoImagesFromList(System.ReadOnlyMemory{System.Char},System.Nullable{MediaBrowser.Model.MediaInfo.MediaContainers},MediaBrowser.Model.Entities.MediaStream,MediaBrowser.Model.MediaInfo.MediaProtocol,System.Nullable{MediaBrowser.Model.Entities.Video3DFormat},System.TimeSpan[],System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Extracts the video images from a list of time points.</summary>
            <param name="inputPath">The input path.</param>
            <param name="container">The container.</param>
            <param name="videoStream">The video stream.</param>
            <param name="protocol">The protocol.</param>
            <param name="threedFormat">The threed format.</param>
            <param name="extractionTimes">The extraction times.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="filenamePrefix">The filename prefix.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder">
            <summary>
            Interface IMediaEncoder
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.GetInputArgument(System.ReadOnlySpan{System.Char},MediaBrowser.Model.MediaInfo.MediaProtocol)">
            <summary>
            Gets the input argument.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="protocol">The protocol.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.GetTimeParameter(System.Int64)">
            <summary>
            Gets the time parameter.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EncodeAudio(MediaBrowser.Controller.MediaEncoding.EncodingJobOptions,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Encodes the audio.
            </summary>
            <param name="options">The options.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EncodeVideo(MediaBrowser.Controller.MediaEncoding.EncodingJobOptions,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Encodes the video.
            </summary>
            <param name="options">The options.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;System.String&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaEncoder.EscapeSubtitleFilterPath(System.ReadOnlySpan{System.Char})">
            <summary>
            Escapes the subtitle filter path.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IMediaImageConverter">
            <summary>Interface IMediaImageConverter.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaImageConverter.ConvertImage(System.String,System.String)">
            <summary>Converts an image via ffmpeg based on file extension.</summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaImageConverter.SupportsEncoder(System.ReadOnlySpan{System.Char})">
            <summary>Allows checking for a specific ffmpeg encoder.</summary>
            <param name="encoder">The encoder name.</param>
            <returns>A value indicating whether the specified encoder is available.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IMediaProbeManager">
            <summary>Interface IMediaProbeManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IMediaProbeManager.GetMediaInfo(MediaBrowser.Controller.MediaEncoding.MediaInfoRequest,System.Threading.CancellationToken)">
            <summary>Probe the specified media.</summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.IStreamInfoManager">
            <summary>Interface IStreamInfoManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.IStreamInfoManager.SetDynamicValues(MediaBrowser.Model.Entities.MediaStream)">
            <summary>Sets dynamic stream values.</summary>
            <param name="stream">The <see cref="T:MediaBrowser.Model.Entities.MediaStream"/>.</param>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleEncoder.GetSubtitles(System.String,MediaBrowser.Model.MediaInfo.MediaProtocol,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},MediaBrowser.Model.Entities.MediaStream,System.String,System.Int64,System.Int64,System.Boolean,MediaBrowser.Model.Dlna.EncodingContext,System.Threading.CancellationToken)">
            <summary>
            Gets the subtitles.
            </summary>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleEncoder.GetSubtitleFileCharacterSet(System.String,MediaBrowser.Model.Globalization.CultureDto,MediaBrowser.Model.MediaInfo.MediaProtocol,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Gets the subtitle language encoding parameter.</summary>
            <param name="path">The path.</param>
            <param name="language">The language.</param>
            <param name="protocol">The protocol.</param>
            <param name="requestHeaders">The request headers.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.ISubtitleFontsManager">
            <summary>Interface ISubtitleFontsManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleFontsManager.Initialize">
            <summary>Initializes this instance.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleFontsManager.CreateTranscodingFontsDir(MediaBrowser.Model.Dto.MediaSourceInfo,System.String,System.Threading.CancellationToken)">
            <summary>Sets up a directory containing all embedded fonts for transcoding.</summary>
            <param name="mediaSource">The media source.</param>
            <param name="targetDir"></param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The path to a temporary fonts directory for transcoding.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleFontsManager.CheckExtractFonts(MediaBrowser.Model.Dto.MediaSourceInfo,System.Threading.CancellationToken)">
            <summary>Extracts the video image.</summary>
            <param name="mediaSource">The media source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True when extraction was successful or fonts are available already; False when extraction has failed.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.ISubtitleOcrDataManager">
            <summary>Interface ISubtitleOcrDataManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleOcrDataManager.Initialize">
            <summary>Initializes this instance.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.ISubtitleOcrDataManager.CheckDownloadOcrData(System.Threading.CancellationToken)">
            <summary>Extracts the video image.</summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True when extraction was successful or fonts are available already; False when extraction has failed.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.MediaEncoding.Tests.IServerTranscodingTestManager">
            <summary>Interface IServerTranscodingTestManager.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.#ctor(MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccels,MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccels)">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object"></see> class.</summary>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.op_Equality(MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair,MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.op_Inequality(MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair,MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair)">
            <summary>Returns a value that indicates whether two <see cref="T:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.Equals(MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthenticatedAttribute.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthenticatedAttribute.AllowBeforeStartupWizard">
            <summary>
            Gets or sets a value indicating whether [allow before startup wizard].
            </summary>
            <value><c>true</c> if [allow before startup wizard]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Net.AuthenticatedAttribute.RequestFilter(MediaBrowser.Model.Services.IRequest,MediaBrowser.Model.Services.IResponse,System.Object)">
            <summary>The request filter is executed before the service.</summary>
            <returns></returns>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.ReportedDeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>The device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Client">
            <summary>
            Gets or sets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.AuthorizationInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2">
            <summary>
            Starts sending data over a web socket periodically when a message is received, and then stops when a corresponding stop message is received
            </summary>
            <typeparam name="TReturnDataType">The type of the T return data type.</typeparam>
            <typeparam name="TStateType">The type of the T state type.</typeparam>
        </member>
        <member name="F:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.ActiveConnections">
            <summary>
            The _active connections
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.GetDataToSend(MediaBrowser.Controller.Net.IWebSocketConnection,`1,System.Threading.CancellationToken)">
            <summary>Gets the data to send.</summary>
            <param name="state">The state.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{`1}.</returns>
        </member>
        <member name="F:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.ProcessMessage(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Start(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Starts sending messages over a web socket
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Stop(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Stops sending messages over a web socket
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.DisposeConnection(System.Tuple{MediaBrowser.Controller.Net.IWebSocketConnection,System.Threading.CancellationTokenSource,`1})">
            <summary>
            Disposes the connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Net.BasePeriodicWebSocketListener`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IAuthorizationContext.GetAuthorizationInfo(System.Object)">
            <summary>
            Gets the authorization information.
            </summary>
            <param name="requestContext">The request context.</param>
            <returns>AuthorizationInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IAuthorizationContext.GetAuthorizationInfo(MediaBrowser.Model.Services.IRequest)">
            <summary>
            Gets the authorization information.
            </summary>
            <param name="requestContext">The request context.</param>
            <returns>AuthorizationInfo.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IHasResultFactory">
            <summary>
            Interface IHasResultFactory
            Services that require a ResultFactory should implement this
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IHasResultFactory.ResultFactory">
            <summary>
            Gets or sets the result factory.
            </summary>
            <value>The result factory.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IHttpResultFactory">
            <summary>
            Interface IHttpResultFactory
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpResultFactory.GetResult(MediaBrowser.Model.Services.IRequest,System.ReadOnlyMemory{System.Byte},System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpResultFactory.GetStaticResult(MediaBrowser.Model.Services.IRequest,System.Guid,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan},System.String,System.Func{System.Int64,System.Int64,System.Threading.CancellationToken,System.Threading.Tasks.Task{MediaBrowser.Model.IO.StreamHandler}},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Gets the static result.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpResultFactory.GetStaticResult(MediaBrowser.Model.Services.IRequest,MediaBrowser.Controller.Net.StaticResultOptions)">
            <summary>
            Gets the static result.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="options">The options.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpResultFactory.GetStaticFileResult(MediaBrowser.Model.Services.IRequest,System.String,MediaBrowser.Model.IO.FileShareMode)">
            <summary>
            Gets the static file result.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="path">The path.</param>
            <param name="fileShare">The file share.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpResultFactory.GetStaticFileResult(MediaBrowser.Model.Services.IRequest,MediaBrowser.Controller.Net.StaticFileResultOptions)">
            <summary>
            Gets the static file result.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="options">The options.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IHttpServer">
            <summary>
            Interface IHttpServer
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IHttpServer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Net.IHttpServer.WebSocketConnected">
            <summary>
            Occurs when [web socket connected].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Net.IWebSocketConnection.Closed">
            <summary>
            Occurs when [closed].
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.LastActivityDate">
            <summary>
            Gets the last activity date.
            </summary>
            <value>The last activity date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.QueryString">
            <summary>
            Gets or sets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.OnReceive">
            <summary>
            Gets or sets the receive action.
            </summary>
            <value>The receive action.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.IWebSocketConnection.RemoteAddress">
            <summary>
            Gets the remote end point.
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketConnection.SendAsync``1(MediaBrowser.Model.Net.WebSocketMessage{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a message asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketConnection.SendAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends a message asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketConnection.SendAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Sends a message asynchronously.
            </summary>
            <param name="text">The text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="T:MediaBrowser.Controller.Net.IWebSocketListener">
             <summary>
            This is an interface for listening to messages coming through a web socket connection
             </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Net.IWebSocketListener.ProcessMessage(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketConnectingEventArgs.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketConnectingEventArgs.RemoteAddress">
            <summary>
            Gets or sets the endpoint.
            </summary>
            <value>The endpoint.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketConnectingEventArgs.QueryString">
            <summary>
            Gets or sets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketConnectingEventArgs.AllowConnection">
            <summary>
            Gets or sets a value indicating whether [allow connection].
            </summary>
            <value><c>true</c> if [allow connection]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Net.WebSocketMessageInfo">
            <summary>
            Class WebSocketMessageInfo
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Net.WebSocketMessageInfo.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Notifications.INotificationManager.GetNotificationCategories(System.String,MediaBrowser.Controller.Entities.User)">
            <summary>
            Gets the notification types.
            </summary>
            <returns>IEnumerable{NotificationTypeInfo}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IDisplayPreferencesRepository">
            <summary>
            Interface IDisplayPreferencesRepository
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IDisplayPreferencesRepository.SaveDisplayPreferences(MediaBrowser.Model.Entities.DisplayPreferences,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves display preferences for an item
            </summary>
            <param name="displayPreferences">The display preferences.</param>
            <param name="userId">The user id.</param>
            <param name="client">The client.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IDisplayPreferencesRepository.GetDisplayPreferences(System.String,System.Guid,System.String)">
            <summary>
            Gets the display preferences.
            </summary>
            <param name="displayPreferencesId">The display preferences id.</param>
            <param name="userId">The user id.</param>
            <param name="client">The client.</param>
            <returns>Task{DisplayPreferences}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IItemRepository">
            <summary>
            Provides an interface to implement an Item repository
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveItem(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <summary>
            Saves an item
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.DeleteItems(MediaBrowser.Controller.Entities.BaseItem[])">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveItems(System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem},System.Threading.CancellationToken)">
            <summary>
            Saves the items.
            </summary>
            <param name="items">The items.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetChapters(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>Gets chapters for an item</summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetChapter(System.Int64,System.Int32)">
            <summary>Gets a single chapter for an item</summary>
            <param name="itemId">The item identifier.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveChapters(System.Int64,System.Collections.Generic.List{MediaBrowser.Model.Entities.ChapterInfo})">
            <summary>
            Saves the chapters.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetMediaStreams(MediaBrowser.Controller.Persistence.MediaStreamQuery)">
            <summary>
            Gets the media streams.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.SaveMediaStreams(System.Int64,System.Collections.Generic.List{MediaBrowser.Model.Entities.MediaStream},System.Threading.CancellationToken)">
            <summary>Saves the media streams.</summary>
            <param name="itemId">The item identifier.</param>
            <param name="streams">The streams.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItems(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the items.
            </summary>
            <param name="query">The query.</param>
            <returns>QueryResult&lt;BaseItem&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemIdsList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item ids list.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;Guid&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemPeople(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <summary>
            Gets the people.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;PersonInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.UpdatePeople(System.Int64,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo})">
            <summary>
            Updates the people.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IItemRepository.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <summary>
            Gets the item list.
            </summary>
            <param name="query">The query.</param>
            <returns>List&lt;BaseItem&gt;.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IRepository">
            <summary>
            Provides a base interface for all the repository interfaces
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.IRepository.Name">
            <summary>
            Gets the name of the repository
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IUserDataRepository">
            <summary>
            Provides an interface to implement a UserData repository
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.SaveUserData(System.Int64,System.Int64,MediaBrowser.Controller.Entities.UserItemData,System.Threading.CancellationToken)">
            <summary>
            Saves the user data.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.GetAllUserData(System.Int64)">
            <summary>
            Return all user data associated with the given user
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserDataRepository.SaveAllUserData(System.Int64,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <summary>
            Save all user data associated with the given user
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Persistence.IUserRepository">
            <summary>
            Provides an interface to implement a User repository
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserRepository.DeleteUser(MediaBrowser.Controller.Entities.User)">
            <summary>
            Deletes the user.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserRepository.CreateUser(MediaBrowser.Controller.Entities.User)">
            <summary>
            Saves the user.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Persistence.IUserRepository.RetrieveAllUsers">
            <summary>
            Retrieves all users.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Persistence.MediaStreamQuery.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>The item identifier.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.CreatePlaylist(MediaBrowser.Controller.Playlists.PlaylistCreationRequest)">
            <summary>
            Creates the playlist.
            </summary>
            <param name="options">The options.</param>
            <returns>Task&lt;Playlist&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.AddToPlaylist(System.Int64,System.Int64[],MediaBrowser.Controller.Entities.User)">
            <summary>
            Adds to playlist.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="itemIds">The item ids.</param>
            <param name="user">The user.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.RemoveFromPlaylist(System.Int64,System.Int64[])">
            <summary>
            Removes from playlist.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="entryIds">The entry ids.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Playlists.IPlaylistManager.MoveItem(System.Int64,System.Int64,System.Int32)">
            <summary>
            Moves the item.
            </summary>
            <param name="playlistId">The playlist identifier.</param>
            <param name="entryId">The entry identifier.</param>
            <param name="newIndex">The new index.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.BasePluginSimpleUI`1">
            <summary>
            A base class for a plugin with a single UI/settings page.
            </summary>
            <typeparam name="TOptionType">The type of the options class.</typeparam>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.BasePluginSimpleUI`1.GetOptions">
            <summary>Gets the options.</summary>
            <returns>The current options of type <typeparamref name="TOptionType"/>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.BasePluginSimpleUI`1.SaveOptions(`0)">
            <summary>Saves the options.</summary>
            <param name="options">The options of type <typeparamref name="TOptionType"/>.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.BasePluginSimpleUI`1.OnBeforeShowUI(`0)">
            <summary>Called before the options UI is shown.</summary>
            <param name="options">The options.</param>
            <remarks>
                Override this method to adjust the options before presentation.
                This allows for example to add or update selection source data or other information.
            </remarks>
            <returns>The options object to be used for presentation.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.BasePluginSimpleUI`1.OnOptionsSaving(`0)">
            <summary>Called when options are about to be saved to disk.</summary>
            <remarks>
                
            </remarks>
            <param name="options">The options to be saved.</param>
            <returns>Return <b>false</b> to cancel saving.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.Internal.BeforeShowUIEventArgs.#ctor(Emby.Web.GenericEdit.EditableOptionsBase)">
            <summary>Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Plugins.Internal.BeforeShowUIEventArgs"/> class.</summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.Internal.BeforeShowUIEventArgs.Options">
            <summary>Gets the options.</summary>
            <value>The options.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.Internal.OptionsSavedEventArgs.#ctor(Emby.Web.GenericEdit.EditableOptionsBase)">
            <summary>Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Plugins.Internal.OptionsSavedEventArgs"/> class.</summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.Internal.OptionsSavedEventArgs.Options">
            <summary>Gets the options.</summary>
            <value>The options.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.Internal.OptionsSavingEventArgs.#ctor(Emby.Web.GenericEdit.EditableOptionsBase)">
            <summary>Initializes a new instance of the <see cref="T:MediaBrowser.Controller.Plugins.Internal.OptionsSavingEventArgs"/> class.</summary>
            <param name="options">The options.</param>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.Internal.OptionsSavingEventArgs.Options">
            <summary>Gets the options.</summary>
            <value>The options.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.Internal.OptionsSavingEventArgs.Cancel">
            <summary>Gets or sets a value indicating whether saving should be cancelled.</summary>
            <value><c>true</c> to cancel saving; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.IPluginConfigurationPage">
            <summary>
            Interface IConfigurationPage
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.ConfigurationPageType">
            <summary>
            Gets the type of the configuration page.
            </summary>
            <value>The type of the configuration page.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.Plugin">
            <summary>
            Gets the plugin.
            </summary>
            <value>The plugin.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.IPluginConfigurationPage.GetHtmlStream">
            <summary>
            Gets the HTML stream.
            </summary>
            <returns>Stream.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.ConfigurationPageType">
            <summary>
            Enum ConfigurationPageType
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Plugins.ConfigurationPageType.PluginConfiguration">
            <summary>
            The plugin configuration
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Plugins.ConfigurationPageType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Plugins.IServerEntryPoint">
            <summary>
            Interface IServerEntryPoint
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Plugins.IServerEntryPoint.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.AlbumInfo.AlbumArtists">
            <summary>
            Gets or sets the album artist.
            </summary>
            <value>The album artist.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.ICustomMetadataProvider`1.FetchAsync(MediaBrowser.Controller.Providers.MetadataResult{`0},MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Fetches the asynchronous.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{ItemUpdateType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IDynamicImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the supported images.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IDynamicImageProvider.GetImage(MediaBrowser.Controller.Providers.BaseMetadataResult,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IDynamicImageProviderWithLibraryOptions.GetImage(MediaBrowser.Controller.Providers.BaseMetadataResult,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IExtrasProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IExtrasProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Supportses the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IForcedProvider">
            <summary>
            This is a marker interface that will cause a provider to run even if IsLocked=true
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IHasItemChangeMonitor.HasChanged(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Determines whether the specified item has changed.
            </summary>
            <param name="item">The item.</param>
            <param name="directoryService">The directory service.</param>
            <returns><c>true</c> if the specified item has changed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageEnhancer.Supports(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType)">
            <summary>
            Return true only if the given image for the given item will be enhanced by this enhancer.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <returns><c>true</c> if this enhancer will enhance the supplied image for the supplied item, <c>false</c> otherwise</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IImageEnhancer.Priority">
            <summary>
            Gets the priority or order in which this enhancer should be run.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageEnhancer.GetConfigurationCacheKey(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType)">
            <summary>
            Return a key incorporating all configuration information related to this item
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <returns>Cache key relating to the current state of this item and configuration</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageEnhancer.GetEnhancedImageSize(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Int32,MediaBrowser.Model.Drawing.ImageSize)">
            <summary>
            Gets the size of the enhanced image.
            </summary>
            <param name="item">The item.</param>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="originalImageSize">Size of the original image.</param>
            <returns>ImageSize.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageEnhancer.EnhanceImageAsync(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String,MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Enhances the image async.
            </summary>
            <param name="item">The item.</param>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="imageType">Type of the image.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>Task{Image}.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IImageProvider">
            <summary>
            Interface IImageProvider
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IImageProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Supportses the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.ILocalImageProvider">
            <summary>
            This is just a marker interface
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.ILocalMetadataProvider`1.GetMetadata(MediaBrowser.Controller.Providers.ItemInfo,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.IDirectoryService,System.Threading.CancellationToken)">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IMultipleLocalMetadataProvider`1.GetMultipleMetadata(MediaBrowser.Controller.Providers.ItemInfo,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.IDirectoryService,System.Threading.CancellationToken)">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IMetadataProvider">
            <summary>
            Marker interface
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IMetadataProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IMetadataService.CanRefresh(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Determines whether this instance can refresh the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance can refresh the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IMetadataService.RefreshMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="refreshOptions">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.IMetadataService.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IProviderManager">
            <summary>
            Interface IProviderManager
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.QueueRefresh(System.Int64,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.RefreshPriority)">
            <summary>
            Queues the refresh.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.RefreshFullItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the full item.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.RefreshSingleItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Int64[],MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.IO.Stream,System.ReadOnlyMemory{System.Char},MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Int64[],MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.String,System.ReadOnlyMemory{System.Char},MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Int64[],MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IExternalId})">
            <summary>
            Adds the metadata providers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetAvailableRemoteImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Model.Providers.RemoteImageQuery,System.Threading.CancellationToken)">
            <summary>Gets the available remote images.</summary>
            <param name="item">The item.</param>
            <param name="libraryOptions">The library options.</param>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetRemoteImageProviderInfo(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Gets the image providers.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetAllMetadataPlugins">
            <summary>
            Gets all metadata plugins.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetExternalUrls(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the external urls.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetExternalIdInfos(MediaBrowser.Model.Entities.IHasProviderIds)">
            <summary>
            Gets the external identifier infos.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Saves the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves the metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetRemoteSearchResults``2(MediaBrowser.Controller.Providers.RemoteSearchQuery{``1},System.Threading.CancellationToken)">
            <summary>
            Gets the remote search results.
            </summary>
            <typeparam name="TItemType">The type of the t item type.</typeparam>
            <typeparam name="TLookupType">The type of the t lookup type.</typeparam>
            <param name="searchInfo">The search information.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IProviderManager.GetSearchImage(System.ReadOnlyMemory{System.Char},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the search image.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.IRemoteImageProvider">
            <summary>
            Interface IImageProvider
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the supported images.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{ImageType}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the images.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the image response.
            </summary>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteImageProviderWithOptions.GetImages(MediaBrowser.Controller.Providers.RemoteImageFetchOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the images.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.IRemoteSearchProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the image response.
            </summary>
            <param name="url">The URL.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.MetadataLanguage">
            <summary>
            Gets or sets the metadata language.
            </summary>
            <value>The metadata language.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.MetadataCountryCode">
            <summary>
            Gets or sets the metadata country code.
            </summary>
            <value>The metadata country code.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.ProviderIds">
            <summary>
            Gets or sets the provider ids.
            </summary>
            <value>The provider ids.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.ItemLookupInfo.Year">
            <summary>
            Gets or sets the year.
            </summary>
            <value>The year.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.MetadataProviderPriority">
            <summary>
            Determines when a provider should execute, relative to others
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataProviderPriority.First">
            <summary>
            The first
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataProviderPriority.Second">
            <summary>
            The second
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataProviderPriority.Third">
            <summary>
            The third
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataProviderPriority.Fourth">
            <summary>
            The fourth
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataProviderPriority.Last">
            <summary>
            The last
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.Default">
            <summary>
            Providers will be executed based on default rules
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.MetadataRefreshMode.FullRefresh">
            <summary>
            All providers will be executed to search for new metadata
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.MetadataRefreshOptions.ReplaceAllMetadata">
            <summary>
            When paired with MetadataRefreshMode=FullRefresh, all existing data will be overwritten with new data from the providers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Providers.BaseMetadataResult.ResetPeople">
            <summary>
            Not only does this clear, but initializes the list so that services can differentiate between a null list and zero people
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.RemoteSearchQuery`1.SearchProviderName">
            <summary>
            If set will only search within the given provider
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Providers.RemoteSearchQuery`1.IncludeDisabledProviders">
            <summary>
            Gets or sets a value indicating whether [include disabled providers].
            </summary>
            <value><c>true</c> if [include disabled providers]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Providers.VideoContentType">
            <summary>
            Enum VideoContentType
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.VideoContentType.Episode">
            <summary>
            The episode
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Providers.VideoContentType.Movie">
            <summary>
            The movie
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Resolvers.BaseItemResolver`1.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.BaseItemResolver`1.MediaBrowser#Controller#Resolvers#IItemResolver#ResolvePath(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the path.
            </summary>
            <param name="args">The args.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.BaseItemResolver`1.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>`0.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.IItemResolver">
            <summary>
            Interface IItemResolver
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Resolvers.IItemResolver.ResolvePath(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the path.
            </summary>
            <param name="args">The args.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Resolvers.IItemResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Resolvers.ResolverPriority">
            <summary>
            Enum ResolverPriority
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.First">
            <summary>
            The first
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Second">
            <summary>
            The second
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Third">
            <summary>
            The third
            </summary>
        </member>
        <member name="F:MediaBrowser.Controller.Resolvers.ResolverPriority.Last">
            <summary>
            The last
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Sanitation.TextTransformationStream">
            <summary>
            Composable stream for line-by-line text transformation using a pull-model
            </summary>
            <seealso cref="T:System.IO.Stream" />
        </member>
        <member name="M:MediaBrowser.Controller.Sanitation.TextTransformationStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset">offset</paramref> and <paramref name="count">count</paramref> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer">buffer</paramref> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset">offset</paramref> or <paramref name="count">count</paramref> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured, such as the specified file cannot be found.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"></see> was called after the stream was closed.</exception>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.ReportedDeviceId">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.AppVersion">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DeviceName">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>The name of the device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfo.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.DeviceIds">
            <summary>
            Gets or sets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.HasUser">
            <summary>
            Gets or sets a value indicating whether this instance has user.
            </summary>
            <value><c>null</c> if [has user] contains no value, <c>true</c> if [has user]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Security.AuthenticationInfoQuery.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Create(MediaBrowser.Controller.Security.AuthenticationInfo)">
            <summary>Creates the specified information.</summary>
            <param name="info">The information.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Update(MediaBrowser.Controller.Security.AuthenticationInfo)">
            <summary>Updates the specified information.</summary>
            <param name="info">The information.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IAuthenticationRepository.Get(MediaBrowser.Controller.Security.AuthenticationInfoQuery)">
            <summary>Gets the specified query.</summary>
            <param name="query">The query.</param>
            <returns>QueryResult{AuthenticationInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IEncryptionManager.EncryptString(System.String)">
            <summary>
            Encrypts the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Security.IEncryptionManager.DecryptString(System.String)">
            <summary>
            Decrypts the string.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionController.IsSessionActive">
            <summary>
            Gets a value indicating whether this instance is session active.
            </summary>
            <value><c>true</c> if this instance is session active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionController.SupportsMediaControl">
            <summary>
            Gets a value indicating whether [supports media remote control].
            </summary>
            <value><c>true</c> if [supports media remote control]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionController.SendMessage``1(System.ReadOnlyMemory{System.Char},System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message.
            </summary>
        </member>
        <member name="T:MediaBrowser.Controller.Session.ISessionManager">
            <summary>
            Interface ISessionManager
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackStart">
            <summary>
            Occurs when [playback start].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackProgress">
            <summary>
            Occurs when [playback progress].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.PlaybackStopped">
            <summary>
            Occurs when [playback stopped].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.SessionStarted">
            <summary>
            Occurs when [session started].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.SessionEnded">
            <summary>
            Occurs when [session ended].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.CapabilitiesChanged">
            <summary>
            Occurs when [capabilities changed].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.AuthenticationFailed">
            <summary>
            Occurs when [authentication failed].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Session.ISessionManager.AuthenticationSucceeded">
            <summary>
            Occurs when [authentication succeeded].
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Session.ISessionManager.Sessions">
            <summary>
            Gets the sessions.
            </summary>
            <value>The sessions.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.LogSessionActivity(System.String,System.String,System.Int64,System.String,System.String,System.Net.IPAddress,System.String,MediaBrowser.Controller.Entities.User)">
            <summary>
            Logs the user activity.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackStart(MediaBrowser.Model.Session.PlaybackStartInfo)">
            <summary>
            Used to report that playback has started for an item
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackProgress(MediaBrowser.Model.Session.PlaybackProgressInfo)">
            <summary>
            Used to report playback progress for an item
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.OnPlaybackStopped(MediaBrowser.Model.Session.PlaybackStopInfo)">
            <summary>
            Used to report that playback has ended for an item
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportSessionEnded(System.String)">
            <summary>
            Reports the session ended.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendGeneralCommand(System.String,System.String,MediaBrowser.Model.Session.GeneralCommand,System.Threading.CancellationToken)">
            <summary>
            Sends the general command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageCommand(System.String,System.String,MediaBrowser.Model.Session.MessageCommand,System.Threading.CancellationToken)">
            <summary>
            Sends the message command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendPlayCommand(System.String,System.String,MediaBrowser.Model.Session.PlayRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the play command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendBrowseCommand(System.String,System.String,MediaBrowser.Model.Session.BrowseRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the browse command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendPlaystateCommand(System.String,System.String,MediaBrowser.Model.Session.PlaystateRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the playstate command.
            </summary>
            <param name="controllingSessionId">The controlling session identifier.</param>
            <param name="sessionId">The session id.</param>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToAdminSessions``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to admin sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToUserSessions``1(System.Int64[],System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to user sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendMessageToUserDeviceSessions``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends the message to user device sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendRestartRequiredNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the restart required message.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendServerShutdownNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the server shutdown notification.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.SendServerRestartNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the server restart notification.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.AddAdditionalUser(System.String,System.Int64)">
            <summary>
            Adds the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RemoveAdditionalUser(System.String,System.Int64)">
            <summary>
            Removes the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportNowViewingItem(System.String,System.String)">
            <summary>
            Reports the now viewing item.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportNowViewingItem(System.String,MediaBrowser.Model.Dto.BaseItemDto)">
            <summary>
            Reports the now viewing item.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.AuthenticateNewSession(MediaBrowser.Controller.Session.AuthenticationRequest,System.Threading.CancellationToken)">
            <summary>
            Authenticates the new session.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.CreateNewSession(MediaBrowser.Controller.Session.AuthenticationRequest,System.Threading.CancellationToken)">
            <summary>
            Creates the new session.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportCapabilities(System.String,MediaBrowser.Model.Session.ClientCapabilities)">
            <summary>
            Reports the capabilities.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="capabilities">The capabilities.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ReportTranscodingInfo(System.String,System.String,MediaBrowser.Model.Session.TranscodingInfo)">
            <summary>Reports the transcoding information.</summary>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="playSessionId">The play session identifier.</param>
            <param name="info">The information.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.ClearTranscodingInfo(System.String,System.String)">
            <summary>Clears the transcoding information.</summary>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="playSessionId">The play session identifier.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSession(System.String,System.String,System.String)">
            <summary>
            Gets the session.
            </summary>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="client">The client.</param>
            <param name="version">The version.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSessionByAuthenticationToken(System.String,System.String,System.Net.IPAddress,System.String)">
            <summary>
            Gets the session by authentication token.
            </summary>
            <param name="token">The token.</param>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="remoteAddress">The remote endpoint.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.GetSessionByAuthenticationToken(MediaBrowser.Controller.Security.AuthenticationInfo,System.String,System.Net.IPAddress,System.String,System.String)">
            <summary>
            Gets the session by authentication token.
            </summary>
            <param name="info">The information.</param>
            <param name="reportedDeviceId">The device identifier.</param>
            <param name="remoteAddress">The remote endpoint.</param>
            <param name="appVersion">The application version.</param>
            <returns>Task&lt;SessionInfo&gt;.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.Logout(System.String)">
            <summary>
            Logouts the specified access token.
            </summary>
            <param name="accessToken">The access token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RevokeUserTokens(System.Int64,System.String)">
            <summary>
            Revokes the user tokens.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Session.ISessionManager.RevokeToken(System.String)">
            <summary>
            Revokes the token.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Session.PlaySessionInfo.LastPingTime">
            <summary>
            Gets or sets the last playback check in.
            </summary>
            <value>The last playback check in.</value>
        </member>
        <member name="T:MediaBrowser.Controller.Session.SessionInfo">
            <summary>
            Class SessionInfo
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.RemoteEndPoint">
            <summary>
            Gets or sets the remote end point.
            </summary>
            <value>The remote end point.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.PlayableMediaTypes">
            <summary>
            Gets or sets the playable media types.
            </summary>
            <value>The playable media types.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.UserName">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.Client">
            <summary>
            Gets or sets the type of the client.
            </summary>
            <value>The type of the client.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
            <value>The last activity date.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.DeviceName">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>The name of the device.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.NowPlayingItem">
            <summary>
            Gets or sets the now playing item.
            </summary>
            <value>The now playing item.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.DeviceId">
            <summary>
            Gets or sets the device id.
            </summary>
            <value>The device id.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.ApplicationVersion">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.SessionControllers">
            <summary>
            Gets or sets the session controller.
            </summary>
            <value>The session controller.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.AppIconUrl">
            <summary>
            Gets or sets the application icon URL.
            </summary>
            <value>The application icon URL.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.SupportedCommands">
            <summary>
            Gets or sets the supported commands.
            </summary>
            <value>The supported commands.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Session.SessionInfo.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:MediaBrowser.Controller.Subtitles.ISubtitleManager.SubtitleDownloadFailure">
            <summary>
            Occurs when [subtitle download failure].
            </summary>
        </member>
        <member name="E:MediaBrowser.Controller.Subtitles.ISubtitleManager.SubtitlesDownloaded">
            <summary>
            Occurs when [subtitles downloaded].
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Subtitles.ISubtitleProvider})">
            <summary>
            Adds the parts.
            </summary>
            <param name="subtitleProviders">The subtitle providers.</param>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.SearchSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.SearchSubtitles(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RemoteSubtitleInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.Configuration.LibraryOptions,System.Threading.CancellationToken)">
            <summary>
            Downloads the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.GetRemoteSubtitles(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the remote subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.DeleteSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <summary>
            Deletes the subtitles.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleManager.GetSupportedProviders(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the providers.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.ISubtitleProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Subtitles.ISubtitleProvider.SupportedMediaTypes">
            <summary>
            Gets the supported media types.
            </summary>
            <value>The supported media types.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleProvider.Search(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Searches the subtitles.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IEnumerable{RemoteSubtitleInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Subtitles.ISubtitleProvider.GetSubtitles(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the subtitles.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{SubtitleResponse}.</returns>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.IHasDynamicAccess.GetSyncedFileInfo(System.String,MediaBrowser.Model.Sync.SyncTarget,System.Threading.CancellationToken)">
            <summary>
            Gets the synced file information.
            </summary>
            <param name="id">The identifier.</param>
            <param name="target">The target.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;SyncedFileInfo&gt;.</returns>
        </member>
        <member name="T:MediaBrowser.Controller.Sync.IRemoteSyncProvider">
            <summary>
            A marker interface
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.IServerSyncProvider.SendFile(MediaBrowser.Model.Sync.SyncJob,System.String,System.IO.Stream,System.Boolean,System.String[],MediaBrowser.Model.Sync.SyncTarget,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Transfers the file.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.IServerSyncProvider.DeleteFile(MediaBrowser.Model.Sync.SyncJob,System.String,MediaBrowser.Model.Sync.SyncTarget,System.Threading.CancellationToken)">
            <summary>
            Delete a synchronized file.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.ISupportsDirectCopy.SendFile(MediaBrowser.Model.Sync.SyncJob,System.String,System.String,System.Boolean,System.String[],MediaBrowser.Model.Sync.SyncTarget,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Sends the file.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.ISyncProvider.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:MediaBrowser.Controller.Sync.ISyncProvider.GetSyncTargets(MediaBrowser.Controller.Sync.SyncTargetQuery)">
            <summary>
            Gets the synchronize targets.
            </summary>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.RequiredHttpHeaders">
            <summary>
            Gets or sets the required HTTP headers.
            </summary>
            <value>The required HTTP headers.</value>
        </member>
        <member name="P:MediaBrowser.Controller.Sync.SyncedFileInfo.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:MediaBrowser.Controller.TV.ITVSeriesManager.GetNextUp(MediaBrowser.Model.Querying.NextUpQuery,MediaBrowser.Controller.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the next up.
            </summary>
        </member>
        <member name="M:MediaBrowser.Controller.TV.ITVSeriesManager.GetNextUp(MediaBrowser.Model.Querying.NextUpQuery,MediaBrowser.Controller.Entities.User,MediaBrowser.Controller.Entities.BaseItem[],MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Gets the next up.
            </summary>
        </member>
        <member name="P:Emby.Notifications.IUserNotifier.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Notifications.IUserNotifier.SendNotification(Emby.Notifications.InternalNotificationRequest,System.Threading.CancellationToken)">
            <summary>
            Sends the notification.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Emby.Notifications.NotificationInfo.UserIds">
            <summary>
            Limit events based on user ids, for admin notifications
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationInfo.UserId">
            <summary>
            Notification intended for a specific user
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationInfo.Options">
            <summary>
            This is for webhooks since this will cause xml serialization to fail
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationRequest.Title">
            <summary>
            For notification outputs that require a display title
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationRequest.Description">
            <summary>
            For notification outputs that require a description
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationRequest.Url">
            <summary>
            For notification outputs that support an interactive url
            </summary>
        </member>
        <member name="P:Emby.Notifications.NotificationRequest.Date">
            <summary>
            For notifications referencing something that happened at a specific date and time
            </summary>
        </member>
        <member name="P:Emby.Notifications.InternalNotificationRequest.Title">
            <summary>
            For notification outputs that require a display title
            </summary>
        </member>
        <member name="P:Emby.Notifications.InternalNotificationRequest.Description">
            <summary>
            For notification outputs that require a description
            </summary>
        </member>
        <member name="P:Emby.Notifications.InternalNotificationRequest.Url">
            <summary>
            For notification outputs that support an interactive url
            </summary>
        </member>
        <member name="P:Emby.Notifications.InternalNotificationRequest.Date">
            <summary>
            For notifications referencing something that happened at a specific date and time
            </summary>
        </member>
    </members>
</doc>
